\ Preprocessor FOOS prototype pattern demo - Copyright 2017 J.L. Bezemer
\ You can redistribute this file and/or modify it under
\ the terms of the GNU General Public License

include lib/memcell.4th                \ add dynamic memory
include lib/memchar.4th                \ add dynamic memory
include 4pp/lib/foos.4pp               \ add object orientation

:: Prototype
   class
     field: a
     field: b
     virtual: displayCONS
     virtual: displayCLON
     virtual: clone
   end-class {

     :virtual displayCONS {
       ." CONS: " this -> a @ count type cr
       ." CONS: " this -> b @ count type cr
     } ;method

     :virtual displayCLON {
       ." CLON: " this -> a @ count type cr
       ." CLON: " this -> b @ count type cr
     } ;method
                                       \ this acts on the pointer directly
     :default clone                    ( a1 -- a2)
       dup allocated dup allocate abort" Cannot create object"
       swap >r swap over r> smove      \ copy entire object contents
     ;method
   }
;

:: ConcretePrototype1                  ( -- x)
   extends Prototype
   end-extends {

     s" A1" dup 1+ callocate throw     \ make room for the string
     dup this -> a ! place             \ assign and initialize it

     s" B1" dup 1+ callocate throw
     dup this -> b ! place

     this => displayCONS
                                       \ override the clone method
     :virtual clone { this <- clone } {
        this => displayCLON this       \ create the clone, continue with its
     } ;method                         \ pointer, return the new object
  }
;

:: ConcretePrototype2                  ( -- x)
   extends Prototype
   end-extends {

     s" A2" dup 1+ callocate throw     \ make room for the string
     dup this -> a ! place             \ assign and initialize it

     s" B2" dup 1+ callocate throw
     dup this -> b ! place

     this => displayCONS
                                       \ override the clone method
     :virtual clone { this <- clone } {
        s" -C" dup this -> a @ count 1+ rot + cresize throw
        dup this -> a ! +place         \ resize the string accordingly
                                       \ and add the second string
        s" -C" dup this -> b @ count 1+ rot + cresize throw
        dup this -> b ! +place

        this => displayCLON this       \ return the new object
     } ;method
   }
;

new ConcretePrototype1 to cP1
new ConcretePrototype2 to CP2
\ cP1 => clone to cP1C
cP2 => clone to cP2C

\ RESULT:

\ CONS: A1
\ CONS: B1
\ CONS: A2
\ CONS: B2
\ CLON: A2-C
\ CLON: B2-C