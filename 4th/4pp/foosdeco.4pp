\ Preprocessor FOOS decorator pattern demo - Copyright 2016 J.L. Bezemer
\ You can redistribute this file and/or modify it under
\ the terms of the GNU General Public License

include lib/memcell.4th                \ add dynamic memory
include 4pp/lib/foos.4pp               \ add object orientation

:: SimpleCoffee                        \ simple base class
   class
     virtual: destroy                  \ how to destroy this item
     virtual: getCost                  \ the price of this coffee
     virtual: getIngredients           \ the ingredients of this coffee
   end-class {
                                       \ only destroy this object, root
     :virtual destroy { this free throw } ;method
     :virtual getCost { 100 } ;method
     :virtual getIngredients { ." Coffee" } ;method
   }
;

:: CoffeeDecorator                     \ the decorator class
   extends SimpleCoffee
     field: CoffeeDecoration           \ inherited object
   end-extends {

     this -> CoffeeDecoration !        \ assign the object

     :virtual destroy                  \ destroy the object
        { this -> CoffeeDecoration @ => destroy this free throw }
     ;method                           \ after destroying the dependant object

     :virtual getCost { this -> CoffeeDecoration @ => getCost } ;method
                                       \ get previous methods
     :virtual getIngredients
       { this -> CoffeeDecoration @ => getIngredients }
     ;method
   }
;

:: WithMilk                            \ now add milk
   extends CoffeeDecorator
   end-extends {
                                       \ milk is 50 cents
     :virtual getCost { this -> CoffeeDecoration @ => getCost 50 + } ;method

     :virtual getIngredients           \ show what we got
       { this -> CoffeeDecoration @ => getIngredients ." , Milk" }
     ;method
   }
;

:: WithSprinkles                       \ now add sprinkles
   extends CoffeeDecorator
   end-extends {
                                       \ sprinkles is 20 cents
     :virtual getCost { this -> CoffeeDecoration @ => getCost 20 + } ;method

     :virtual getIngredients           \ show what we got
       { this -> CoffeeDecoration @ => getIngredients ." , Sprinkles" }
     ;method
   }
;

new SimpleCoffee to mycoffee           \ start with a simple coffee
mycoffee => getCost . ." cents" cr     \ now what's the damage
mycoffee => getIngredients cr cr       \ and what did we get

mycoffee new WithMilk to mycoffee      \ add milk to it
mycoffee => getCost . ." cents" cr     \ now what's the damage
mycoffee => getIngredients cr cr       \ and what did we get

mycoffee new WithSprinkles to mycoffee \ add sprinkles to it
mycoffee => getCost . ." cents" cr     \ now what's the damage
mycoffee => getIngredients cr          \ and what did we get

mycoffee => destroy                    \ clean up after yourself