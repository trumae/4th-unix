\ Preprocessor composite pattern demo - Copyright 2017 J.L. Bezemer
\ You can redistribute this file and/or modify it under
\ the terms of the GNU General Public License

\ Translation of https://en.wikipedia.org/wiki/Composite_pattern

include lib/memcell.4th
include lib/memchar.4th
include 4pp/lib/foos.4pp

16 constant /list

:: List                                \ we need a kind of list
   class
     /list +field entries
     field:  lp
     method: ladd
     method: lget
     method: lsize
   end-class {

     this -> entries this -> lp !      \ set list pointer
                                       \ save at pointer and increment
     :method ladd  { this -> lp tuck @ ! 1 cells swap +! } ;method
     :method lget  { cells this -> entries + @ } ;method
     :method lsize { this -> lp @ this -> entries - } ;method
   }                                   \ calculate size

   private{ entries lp }
;

\ "Component"
:: Graphic
   class
     virtual: print
   end-class {}
;

\ "Composite"
:: CompositeGraphic
   extends Graphic
     field:  childGraphics
     method: add
   end-extends {

     new List this -> childGraphics !

     :virtual print {
        this -> childGraphics @ -> lsize 1-
        begin
          dup 0< 0=
        while
          dup this -> childGraphics @ -> lget => print 1-
        repeat drop
     } ;method

     :method add { this -> childGraphics @ -> ladd } ;method
   }

   private{ childGraphics }
;

\ "Leaf"
:: Ellipse
   extends Graphic
   end-extends {

     :virtual print { ." Ellipse at address " this . cr } ;method
   }
;

\ Client
instance Ellipse ellipse1
instance Ellipse ellipse2
instance Ellipse ellipse3
instance Ellipse ellipse4

instance CompositeGraphic graphic1
instance CompositeGraphic graphic2
instance CompositeGraphic graphic3

ellipse1 graphic1 -> add
ellipse2 graphic1 -> add
ellipse3 graphic1 -> add

ellipse4 graphic2 -> add

graphic1 graphic3 -> add
graphic2 graphic3 -> add

\ Prints the complete graphic (four times the string "Ellipse")
graphic3 => print
